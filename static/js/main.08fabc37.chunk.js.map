{"version":3,"sources":["components/Timer.js","components/SFComponents.js","components/Editor.js","App.js","serviceWorker.js","index.js"],"names":["Timer","startTimer","resetTimer","timer","setInterval","updateTime","setState","seconds","state","clearInterval","getFormattedTime","time","hrs","mins","secs","ret","formattedTime","this","startButtonText","class","className","onClick","React","Component","WordCount","data","content","trim","count","split","length","Editor","handleEdit","event","editorValue","target","value","fontSize","styles","style","placeholder","autoComplete","spellcheck","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAGaA,G,MAAb,YACE,aAAe,IAAD,8BACZ,+CAuBFC,WAAa,WACX,EAAKC,aACL,IAAMC,EAAQC,YAAY,EAAKC,WAAY,KAC3C,EAAKC,SAAS,CACZH,WA5BU,EAgCdE,WAAa,WACX,EAAKC,SAAS,CACZC,QAAS,EAAKC,MAAMD,QAAU,KAlCpB,EAsCdL,WAAa,WACXO,cAAc,EAAKD,MAAML,OACzB,EAAKG,SAAS,CACZC,QAAS,KAzCC,EA6CdG,iBAAmB,SAAAC,GAEjB,IAAIC,KAASD,EAAO,MAChBE,KAAWF,EAAO,KAAQ,IAC1BG,IAASH,EAAO,GAGhBI,EAAM,GAQV,OANIH,EAAM,IACRG,GAAYH,EAAM,KAAOC,EAAO,GAAK,IAAM,KAG7CE,GAAYF,EAAO,KAAOC,EAAO,GAAK,IAAM,IAC5CC,GAAO,GAAKD,GAzDZ,EAAKN,MAAQ,CACXD,QAAS,EACTJ,MAAO,MAJG,EADhB,sEASI,IAAMa,EAAgBC,KAAKP,iBAAiBO,KAAKT,MAAMD,SACjDW,EAAkBD,KAAKT,MAAMD,QAAU,EAAI,UAAY,QAC7D,OACE,yBAAKY,MAAM,SACT,yBAAKC,UAAU,yBACb,4CACA,0BAAMA,UAAU,eAAhB,IAAgCJ,IAElC,0BAAMG,MAAM,kBACV,4BAAQE,QAASJ,KAAKhB,YAAaiB,GACnC,4BAAQG,QAASJ,KAAKf,YAAtB,eAnBV,GAA2BoB,IAAMC,YCDpBC,EAAY,SAAC,GAAmB,IAAD,IAAhBC,KACpBC,QADoC,MAAT,GAAS,GACrBC,OACfC,EAAUF,EAAUA,EAAQG,MAAM,KAAKC,OAAS,EACtD,OAAO,0BAAMV,UAAU,cAAhB,eAA0CQ,ICCtCG,G,MAAb,YACE,aAAe,IAAD,8BACZ,+CA4BFC,WAAa,SAAAC,GACX,EAAK3B,SAAS,CACZ4B,YAAaD,EAAME,OAAOC,SA7B5B,EAAK5B,MAAQ,CACX6B,SAAU,GACVH,YAAa,IAJH,EADhB,sEASI,IAAMI,EAAS,CACbD,SAAUpB,KAAKT,MAAM6B,UAEvB,OACE,yBAAKjB,UAAU,UACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWK,KAAMR,KAAKT,MAAM0B,eAE9B,8BACEf,MAAM,eACNoB,MAAOD,EACPE,YAAY,gBACZC,aAAa,MACbC,WAAW,QACXC,SAAU1B,KAAKe,kBAxBzB,GAA4BV,IAAMC,YCUnBqB,MAXf,WACE,OACE,yBAAKxB,UAAU,OACb,4BAAQA,UAAU,eAClB,6BACE,kBAAC,EAAD,SCEYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.08fabc37.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Timer.css\";\n\nexport class Timer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      seconds: 0,\n      timer: null\n    };\n  }\n  render() {\n    const formattedTime = this.getFormattedTime(this.state.seconds);\n    const startButtonText = this.state.seconds > 0 ? \"Restart\" : \"Start\";\n    return (\n      <div class=\"timer\">\n        <div className=\"timer-value-container\">\n          <span>Timer:&nbsp;</span>\n          <span className=\"timer-value\"> {formattedTime}</span>\n        </div>\n        <span class=\"timer-controls\">\n          <button onClick={this.startTimer}>{startButtonText}</button>\n          <button onClick={this.resetTimer}>Reset</button>\n        </span>\n      </div>\n    );\n  }\n\n  startTimer = () => {\n    this.resetTimer();\n    const timer = setInterval(this.updateTime, 1000);\n    this.setState({\n      timer\n    });\n  };\n\n  updateTime = () => {\n    this.setState({\n      seconds: this.state.seconds + 1\n    });\n  };\n\n  resetTimer = () => {\n    clearInterval(this.state.timer);\n    this.setState({\n      seconds: 0\n    });\n  };\n\n  getFormattedTime = time => {\n    // Hours, minutes and seconds\n    var hrs = ~~(time / 3600);\n    var mins = ~~((time % 3600) / 60);\n    var secs = ~~time % 60;\n\n    // Output like \"1:01\" or \"4:03:59\" or \"123:03:59\"\n    var ret = \"\";\n\n    if (hrs > 0) {\n      ret += \"\" + hrs + \":\" + (mins < 10 ? \"0\" : \"\");\n    }\n\n    ret += \"\" + mins + \":\" + (secs < 10 ? \"0\" : \"\");\n    ret += \"\" + secs;\n    return ret;\n  };\n}\n","import React from \"react\";\n\nexport const WordCount = ({ data = \"\" }) => {\n  const content = data.trim();\n  const count = !!content ? content.split(\" \").length : 0;\n  return <span className=\"word-count\">Word Count: {count}</span>;\n};\n","import React from \"react\";\n\nimport { Timer } from \"./Timer\";\nimport { WordCount } from \"./SFComponents\";\nimport \"./Editor.css\";\n\nexport class Editor extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      fontSize: 22,\n      editorValue: \"\"\n    };\n  }\n  render() {\n    const styles = {\n      fontSize: this.state.fontSize\n    };\n    return (\n      <div className=\"editor\">\n        <div className=\"controls\">\n          <Timer />\n          <WordCount data={this.state.editorValue} />\n        </div>\n        <textarea\n          class=\"editor-input\"\n          style={styles}\n          placeholder=\"Write here...\"\n          autoComplete=\"off\"\n          spellcheck=\"false\"\n          onChange={this.handleEdit}\n        ></textarea>\n      </div>\n    );\n  }\n\n  handleEdit = event => {\n    this.setState({\n      editorValue: event.target.value\n    });\n  };\n}\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Editor } from \"./components/Editor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"></header>\n      <div>\n        <Editor />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}